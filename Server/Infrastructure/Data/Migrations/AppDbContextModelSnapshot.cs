// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassroomStudents", b =>
                {
                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassroomId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassroomStudents", (string)null);

                    b.HasData(
                        new
                        {
                            ClassroomId = new Guid("d291f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            ClassroomId = new Guid("d292f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            ClassroomId = new Guid("d293f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ClassroomId = new Guid("d294f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            ClassroomId = new Guid("d295f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            ClassroomId = new Guid("d291f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            ClassroomId = new Guid("d292f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            ClassroomId = new Guid("d293f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            ClassroomId = new Guid("d294f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            ClassroomId = new Guid("d295f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            ClassroomId = new Guid("d291f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            ClassroomId = new Guid("d292f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000012")
                        },
                        new
                        {
                            ClassroomId = new Guid("d293f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000013")
                        },
                        new
                        {
                            ClassroomId = new Guid("d294f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000014")
                        },
                        new
                        {
                            ClassroomId = new Guid("d295f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000015")
                        },
                        new
                        {
                            ClassroomId = new Guid("d291f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000016")
                        },
                        new
                        {
                            ClassroomId = new Guid("d292f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000017")
                        },
                        new
                        {
                            ClassroomId = new Guid("d293f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000018")
                        },
                        new
                        {
                            ClassroomId = new Guid("d294f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000019")
                        },
                        new
                        {
                            ClassroomId = new Guid("d295f1ee-6c54-4b01-90e6-d701748f0851"),
                            StudentId = new Guid("00000000-0000-0000-0000-000000000020")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d291f1ee-6c54-4b01-90e6-d701748f0851"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Classroom 1",
                            TeacherId = new Guid("d290f1ee-6c54-4b01-90e6-d701748f0851")
                        },
                        new
                        {
                            Id = new Guid("d292f1ee-6c54-4b01-90e6-d701748f0851"),
                            CreatedAt = new DateTime(2022, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Classroom 2",
                            TeacherId = new Guid("d290f1ee-6c54-4b01-90e6-d701748f0851")
                        },
                        new
                        {
                            Id = new Guid("d293f1ee-6c54-4b01-90e6-d701748f0851"),
                            CreatedAt = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Classroom 3",
                            TeacherId = new Guid("d290f1ee-6c54-4b01-90e6-d701748f0851")
                        },
                        new
                        {
                            Id = new Guid("d294f1ee-6c54-4b01-90e6-d701748f0851"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Classroom 4",
                            TeacherId = new Guid("d290f1ee-6c54-4b01-90e6-d701748f0852")
                        },
                        new
                        {
                            Id = new Guid("d295f1ee-6c54-4b01-90e6-d701748f0851"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Classroom 5",
                            TeacherId = new Guid("d290f1ee-6c54-4b01-90e6-d701748f0852")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "test1@email.com",
                            Name = "User1",
                            Surname = "Surname1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Email = "test2@email.com",
                            Name = "User2",
                            Surname = "Surname2"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Email = "test3@email.com",
                            Name = "User3",
                            Surname = "Surname3"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Email = "test4@email.com",
                            Name = "User4",
                            Surname = "Surname4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Email = "test5@email.com",
                            Name = "User5",
                            Surname = "Surname5"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Email = "test6@email.com",
                            Name = "User6",
                            Surname = "Surname6"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Email = "test7@email.com",
                            Name = "User7",
                            Surname = "Surname7"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Email = "test8@email.com",
                            Name = "User8",
                            Surname = "Surname8"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Email = "test9@email.com",
                            Name = "User9",
                            Surname = "Surname9"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Email = "test10@email.com",
                            Name = "User10",
                            Surname = "Surname10"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Email = "test11@email.com",
                            Name = "User11",
                            Surname = "Surname11"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Email = "test12@email.com",
                            Name = "User12",
                            Surname = "Surname12"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Email = "test13@email.com",
                            Name = "User13",
                            Surname = "Surname13"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Email = "test14@email.com",
                            Name = "User14",
                            Surname = "Surname14"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Email = "test15@email.com",
                            Name = "User15",
                            Surname = "Surname15"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Email = "test16@email.com",
                            Name = "User16",
                            Surname = "Surname16"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Email = "test17@email.com",
                            Name = "User17",
                            Surname = "Surname17"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            Email = "test18@email.com",
                            Name = "User18",
                            Surname = "Surname18"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            Email = "test19@email.com",
                            Name = "User19",
                            Surname = "Surname19"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            Email = "test20@email.com",
                            Name = "User20",
                            Surname = "Surname20"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d290f1ee-6c54-4b01-90e6-d701748f0851"),
                            Email = "teacher1@email.com",
                            Name = "John",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = new Guid("d290f1ee-6c54-4b01-90e6-d701748f0852"),
                            Email = "teacher2@email.com",
                            Name = "Jane",
                            Surname = "Smith"
                        });
                });

            modelBuilder.Entity("Infrastructure.Identity.IdentityAppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClassroomStudents", b =>
                {
                    b.HasOne("Domain.Entities.Classroom", null)
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClassroomStudents_Classrooms");

                    b.HasOne("Domain.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClassroomStudents_Students");
                });

            modelBuilder.Entity("Domain.Entities.Classroom", b =>
                {
                    b.HasOne("Domain.Entities.Teacher", "Teacher")
                        .WithMany("TeacherClassrooms")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Teacher_Classrooms");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Entities.Exercise", b =>
                {
                    b.HasOne("Domain.Entities.Classroom", "Classroom")
                        .WithMany("Exercises")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Classroom_Exercises");

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("Domain.Entities.Rating", b =>
                {
                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("Ratings")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Student_Ratings");

                    b.HasOne("Domain.Entities.Exercise", "Exercise")
                        .WithMany("Ratings")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Exercise_Ratings");

                    b.Navigation("Exercise");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Identity.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Identity.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Identity.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Identity.IdentityAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Classroom", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Domain.Entities.Exercise", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Navigation("TeacherClassrooms");
                });
#pragma warning restore 612, 618
        }
    }
}
